Condition synthesis is a program repair technique that introduces or alters
guard conditions in source code using a set of passing and failing unit tests
as a guide and measure of success. This approach is based largely on that
described in @cite{Staged Program Repair with Condition Synthesis} available at
@url{http://groups.csail.mit.edu/pac/patchgen/papers/spr-fse15.pdf}.


@subsection Performing Condition Synthesis

At a high level, condition synthesis will:
@enumerate
@item
@ref{condition-synthesis-introduce,Introduce an abstract condition} into the source code

@item
Run @emph{negative unit tests} --- tests that should pass, but fail
due to the presence of the defect --- to
@ref{condition-synthesis-identify-values, identify a series of
abstract condition values} that would allow the failing tests to pass. 

@item
For each passing test, @ref{condition-synthesis-test-conditions, test possible (concrete) conditions} to see if there are any that satisfy each value in the identified series of abstract condition values.

@item
If one or more such conditions are found, replace the abstract
condition in the source code with the
@ref{condition-synthesis-best-condition,``best'' such condition}.

@end enumerate

More details about each of these steps are provided in the following sections.

@anchor{condition-synthesis-introduce}
@subsubsection Introduce An Abstract Condition
Abstract conditions are represented by a call to the
@code{abst_cond()} function. Mutations are used to perform the
insertion. The @ref{condition-synthesis-mutations,set of available
mutations} is listed below.


@anchor{condition-synthesis-identify-values}
@subsubsection Identify Abstract Condition Values
The C implementation of @code{abst_cond()} refers to a set of environment
variables in order to determine which value to return.

@itemize

@item
@code{ABST_COND_DEFAULT} specifies the default return value for
@code{abst_cond()}. If not specified, the default return value is 0.

@item
@code{ABST_COND_VALUES} is a list of zeroes and ones which should be
returned in that order. For example, ``001'' would indicate that the
first two invocations of @code{abst_cond()} should return 0, and the
third should return 1. If all values in the list are consumed, all
subsequent invocations will return the default value.

@item
@code{ABST_COND_LOOP_COUNT} is used to control looping behavior. Set
to integer N to specify that every Nth invocation of
@code{abst_cond()} will return 1 and all other invocations return the
default value.

@end itemize

@c DOCFIXME how do ABST_COND_LOOP_COUNT and ABST_COND_VALUES interact?


The implementation of @code{abst_cond()} also records the value
returned each time the function is invoked.


The procedure for identifying abstract condition values depends on whether the condition is looping or non-looping.

@multitable { Non-Looping Conditions }{} 


@item Non-Looping Conditions @tab @enumerate
         @item For each failing test, run the test with a default value of 0.

         @item If the test continues failing, try ``flipping'' the
         last 0 to a 1 in the series of recorded abstract condition
         values and re-running the test. This is based on the
         assumption that tests are ``mostly correct,'' and it's only
         one of the latest branching conditions that was incorrect.

         @item Do this up to a specified cut-off (defined in
         @refapivariable{*abst-cond-attempts*}).

         @item If no series is found that causes the unit test to
         pass, re-run the test with a default value of 1 before giving
         up.

         @item If a successful series of abstract condition values is
         found, record the series and the values of in-scope variables
         at each evaluation of the abstract condition.
         @end enumerate

@item Looping Conditions @tab @enumerate
         @item For each failing test, run the test with a loop-count
         of 0. This has the effect of always returning 1 for each
         invocation of @code{abst_cond()}.

         @item If the test continues failing, try incrementing the
         loop-count so that @code{abst_cond()} only returns 1
         periodically for a period of increasing length.

         @item Do this up to a specified cut-off (defined in
         @refapivariable{*abst-cond-attempts*}).

         @item If no series is found that causes the unit test to
         pass, re-run the test with a default value of 1 before giving
         up.

         @item If a successful series of abstract condition values is
         found, record the series and the values of in-scope variables
         at each evaluation of the abstract condition.
         @end enumerate 

@end multitable

@anchor{condition-synthesis-test-conditions}
@subsubsection Test Possible Conditions

For each test with a satisfying series of values for the abstract condition,
we have recorded an environment showing the values of in-scope variables at
the time the condition was evaluated. For each variable, var, that is
recorded with a value, v, we synthesize two conditions: @code{(var == v)} and
@code{!(var == v)}.

Then for each condition, we can determine whether it would allow a unit test to
pass by checking whether it is entailed by that test's series of environments
and desired abstract condition values.


@anchor{condition-synthesis-best-condition} 
@subsubsection Select ``Best'' Condition

The condition which satisfies the largest number of environment and
abstract condition value pairs is selected as the ``best'' condition,
applied, and tested. If this condition repairs all unit tests, it is
returned as the solution. If it improves the fitness (i.e., causes
more unit tests to pass than before), then it is retained as the
``current best'' solution. In this case, up to
@refapivariable{*synth-condition-attempts*} other conditions are
tested to see if they offer additional improvements to the fitness.


@subsection API Support for Condition Synthesis

API support for style features is documented in section
@ref{api-condition-synthesis,API | Condition Synthesis}. We provide a
brief overview here.

@anchor{condition-synthesis-mutations}
Mutations (subclasses of @refapiclass{mutation})

@itemize
@item @refapiclass{add-condition}
@item @refapiclass{if-to-while-tighten-condition}
@item @refapiclass{if-to-while}
@item @refapiclass{insert-else-if}
@item @refapiclass{loosen-condition}
@item @refapiclass{tighten-condition}
@end itemize


Methods on Mutations

@itemize
@item @refapifunction{synthesize-condition}
@item @refapigeneric{valid-targets}
@item @refapifunction{instrumentation-exprs}
@end itemize


@subsection Condition Synthesis Example

Function @code{try-synthesis} will attempt condition synthesis on all valid
target locations for each of the possible guard mutations described above.

@lisp
(defun try-synthesis (types variant test-suite)
  "Attempt condition synthesis for all mutation types and valid
locations in variant. Return the first successful result result."
  (let ((obj (copy variant)))
    (when (bad-stmts obj)
      (loop
       for type in '(add-condition
                     insert-else-if
                     if-to-while-tighten-condition
                     loosen-condition
                     tighten-condition)
       for valid-targets = (valid-targets (make-instance type)
                                          obj)
       do
       (loop
        for target in valid-targets
        for i upfrom 0
        for mutation = (make-instance type :targets target)
        for result =
        (handler-case
         (synthesize-condition obj test-suite mutation)
         ;; Build failures can happen if we pick a bad
         ;; condition to modify. Ignore them and try the
         ;; next target.
         (phenome (err)
                  (note 1 "~a~%" err)))
        do (when result
             (setf (fitness result) (test-fitness result))
             (return-from try-synthesis result)))))))
@end lisp
