The Style Features component offers the ability to extract a set of features
from a software object into a feature vector. We use the Code Stylometry
Feature Set (CSFS) described in @cite{De-anonymizing Programmers via Code
Stylometry} at
@url{https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-caliskan-islam.pdf}).



To extract the set of feature vectors from a software object, use
@code{extract-features} FIXME LINK, providing a software object and a list of
feature extractor functions.

Each feature extractor function is expected to operate on a clang object and
return a vector containing the values for that feature. These vectors are
concatenated in order into one large vector by extract-features.

As a naming convention, each feature extractor function name ends with
``-extractor''. The available feature extractors are also listed in
the parameter @code{*feature-extractors*}.

The resulting feature vector can be used as a fitness vector with the lexicase
evolution strategy. One application is to drive evolution towards solutions
which better match the features of the surrounding source code.



@section API Support for Feature Extraction

@itemize

@item @ref{doc-clang-feature-extractors,Clang Feature Extractors}
@item @ref{doc-feature-extractor-utilities,Utilities}
@end itemize

@anchor{doc-clang-feature-extractors}
@heading Clang Feature Extractors

The following are the available AST-related feature extractors for clang
software objects, i.e., features derived from properties of a clang AST.

@multitable {}{}



@item @code{ast-node-type-tf-extractor}
      @tab number of nodes of each different ast-class (e.g., IfStmt
or DeclStmt) in the AST. 

@item @code{max-depth-ast-extractor}
      @tab maximum depth of any node in the AST.

@item avg-depth-ast-extractor
      @tab the average depth of nodes in the AST.

@item ast-full-stmt-bi-grams-extractor
      @tab the number of occurrences of each ast-class bi-gram for
           full statements in the AST.

@item ast-bi-grams-extractor
      @tab the number of occurrences of each ast-class bi-gram in the
           AST.

@item ast-keyword-tf-extractor
      @tab for each C keyword, the number of occurrences of that   
           keyword in the AST.

@end multitable

@anchor{doc-feature-extractor-utilities}
@heading Utilities

Generic methods for counting uni-grams or bi-grams in a list are
provided. Refer to the documentation for @code{uni-grams} and
@code{bi-grams} for descriptions of usage.

Unit tests are included under the @code{style-features} suite.
