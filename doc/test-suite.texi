
SEL incorporates representations for runnable unit tests. This allows
individual components (such as @ref{Condition Synthesis} and
@ref{Trace Collection}) and evolution projects to determine whether
unit tests are passing, and if their behavior has changed.



@section API Support For Unit Tests

@itemize

@item @ref{doc-test-classes,
           @code{test-case} and @code{test-suite} classes}
@item @ref{doc-test-case-methods, @code{test-case} Methods}
@item @ref{doc-process-methods, @code{process} Methods}

@end itemize


@anchor{doc-test-classes}
@subheading Test Suite Classes


@multitable {} {}

@item @ref{Class test-case, class @code{test-case}}
      @tab a single test

@item @ref{Class test-suite, class @code{test-suite}}
      @tab a suite of tests (as a collection of
      @ref{Class test-case, @code{test-case}} objects)

@item @ref{Class process, class @code{process}}
      @tab wraps around SBCL- or CCL-specific representations of
           external processes

@end multitable


@anchor{doc-test-case-methods}
@subheading @code{test-case} Methods

@itemize
@item @ref{Generic-Function start-test, @code{start-test}}
@item @ref{Generic-Function finish-test, @code{finish-test}}
@item @ref{Generic-Function run-test, @code{run-test}}
@item @ref{Generic-Function evaluate, @code{evaluate}}
@end itemize


@anchor{doc-process-methods}
@subheading @code{process} Methods

@itemize

@item @ref{Generic-Function process-error-stream,
           @code{process-error-stream}}
@item @ref{Generic-Function process-exit-code,
           @code{process-exit-code}}
@item @ref{Generic-Function process-id,
           @code{process-id}}
@item @ref{Generic-Function process-input-stream,
           @code{process-input-stream}}
@item @ref{Generic-Function process-output-stream,
           @code{process-output-stream}}
@item @ref{Generic-Function process-status,
           @code{process-status}}
@item @ref{Generic-Function signal-process,
           @code{signal-process}}


@end itemize


