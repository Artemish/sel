

@menu

* Mutations::

@end menu




@node Mutations,,,SEL API Reference
@section Mutations

@subsection Adding new mutations

New mutations should derive from the most-relevant base class. To
define a new mutation from an existing base class, use

@lisp
(define-mutation new-mutation (base-mutation)
  ())
@end lisp

The mutation may be initialized with two functions; a targeter and
picker. The targeter is a function which, given a software object,
returns a list of mutation targets; this function defaults to
@code{pick-bad}. The picker is a function which, given a software
object, returns a random mutation target; this function defaults to a
random element returned by @code{pick-bad}.

After creating a software object and a mutation, use the
@code{apply-mutation} method to create a new mutant.




