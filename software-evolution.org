#+Title: Software Evolution
#+Author: Eric Schulte
#+email: eschulte@cs.unm.edu
#+Options: toc:1 ^:nil
#+properties: exports code
#+HTML: <center>extant software evolution</center>

* Design
:   +-------------+    +-------------+    +--------+    +--------------+
:   | interactive |    | distributed |    | repair |    | optimization |
:   |-------------|    |  evolution  |    |--------|    |--------------|
:   | live in the |    |-------------|    | fixing |    |   improve    |
:   |   editor    |    |  using ZMQ  |    |  bugs  |    |  performance |
:   +-------------+    +-------------+    +--------+    +--------------+ ...
:          |                  |                |                 |
:          +------------------+------+---------+-----------------+
:                                    |
:                                  +-+-+                   population functions
:                                  | | |                   --------------------
:  global variables         +------------------+           incorporate
:  ----------------         |   *population*   |           evict
:  ,,*population*             |------------------|           tournament
:  ,,*max-population-size*    |      list of     |           mutate
:  ,,*tournament-size*        | software objects |           crossed
:  ,,*fitness-predicate*      +------------------+           new-individual
:  ,,*cross-chance*                    |                     evolve
:  ,,*fitness-evals*                 +-+-+
:  ,,*running*                       | | |                   software functions
:                           +------------------+           --------------
:                           | software object  |           genome
:  evolve arguments         |------------------|           phenome
:  ----------------         | edits,           |           evaluate
:  max-evals                | fitness          |           copy
:  max-time                 | ...              |           mutate
:  max-inds                 +------------------+           crossover
:  max-fit                            |                    edit-distance
:  min-fit                            |
:  pop-fn         +---------------+---+------------+------------------+ ...
:  ind-fn         |               |                |                  |
:         +---------------+  +------------+  +---------------+  +-------------+
:         |    C AST      |  |   ELF      |  |      asm      |  |    lisp     |
:         |---------------|  |------------|  |---------------|  |-------------|
:         |   C Abstract  |  | Executable |  | assembly code |  | lisp source |
:         |  Syntax Tree  |  |  Linkable  |  +---------------+  +-------------+
:         +---------------+  |   Format   |                           |
:                 |          +------------+                  +----------+
:       +--------------+                                     |          |
:       |              |                           +------------+  +----------+
:   +-------+  +----------------+                  |   lisp fn  |  | lisp ext |
:   | clang |  |       cil      |                  |------------|  |----------|
:   |-------|  |----------------|                  | individual |  | external |
:   | C AST |  | C Intermediate |                  |  functions |  |   eval   |
:   +-------+  |    Language    |                  +------------+  +----------+
:              +----------------+

The =*population*= is a global variable holding a list of evolving
software variants.  The evolutionary computation functions operate
directly on the =*population*= through the "population functions".
Exposure of the population through a global variable enables the user
to initialize the population in any way, and allows external functions
to monitor and interact with the population during evolution.  For
example [[https://github.com/eschulte/software-evolution/blob/master/evolution/distributed.lisp][distributed.lisp]] enables sharing of individuals between
multiple instances of evolution through two functions which interact
with the =*population*= variable directly.

Each software variant is an object whose class is a sub-class of the
general =software= class.  New representations are implemented through
sub-classing =software= and customizing the generic software functions
where necessary.

Parameterization of the EC algorithm is done through setting global
variables and through arguments to the =evolve= function.

* Usage
Licensed under the GPLV3, see the [[https://github.com/eschulte/software-evolution/blob/master/COPYING][COPYING]] file in this directory for
more information.

1. Optional dependencies for the clang and cil backends respectively
   are [[https://github.com/eschulte/clang-mutate][clang-mutate]] and [[https://github.com/eschulte/cil-mutate][cil-mutate]].

2. Available using git from [[https://github.com/eschulte/software-evolution][github]].

3. To begin, cd into the test/gcd directory and look around.
   : $ ls -1
   : gcd.c                   # <- original program
   : repair-ast.lisp         # <- lisp code driving the repair process
   : test.sh*                # <- test script used to exercise gcd variants

4. Repairs may be performed from an interactive lisp session by
   evaluating the forms in test/gcd/repair-ast.lisp.

* COMMENT Notes
The following are informal working and development notes.

** an option for containing the execution of evolved variants
http://lxc.sourceforge.net/
** when failing and running interactively, try to output errors from test.sh
So often we start to debug the framework, when the bug is in test.sh.

** ensure mutation operations can be reapplied
So if say we know that a program was crossed over at point x, we
should be able to call crossover(x) separate form the whole evolution
framework.

** objects generalizations and interactions
:                       +--- evolution --- goals
:                       |
:                  population(s)
:                       |
: program --- representations----------- mutations ------ library/templates
:                       |                                         |
:                   evaluation                             version control

** thread local global variables
In case we want to run multiple populations in separate threads.

This should be easy with =let= binding of global variables.

** remember the need to collect statistics
- number of test suite evaluations
- time spent in many different aspects of the program, e.g.,
  - compilation
  - test suite evaluation
  - mutation and population maintenance
  - total run time

** consider how weighted path information propagates with mutation operators
Each individual should have its own weight, possibly expressed as a
diff against some global weight.

Even better, we can just store each individuals weight as part of its
genome.  If memory does become an issue then diff fanciness can be
brought to bear later on.

** possibly re-calculate the weighted path with each test case run
Nope, this would involve instrumenting each individual at the AST
level, and would require multiple runs for sampling at the ASM/ELF
levels, better to just use a heuristic to update/maintain weights.

e.g., weight of a recently transplanted piece of code is equal to the
average of previous weight and weight of both new neighbors.

See the =*genome-averaging-keys*= variable.

** allow adding individuals on-the-fly
Implement all operations as one-offs against a local =*population*=, a
la [[http://cs.unm.edu/~treport/tr/11-04/paper-2011-01.pdf][PEC]].

** as basis for distributed GP repair
See above, shouldn't be too difficult.  Loosely follow the PEC
algorithm.

** timed EC operators at set frequencies
One frequency options should be "fast as possible", but allowing
frequencies could be good for known energy consumption (e.g., if
running on someone's phone).

* COMMENT Tasks [11/19]
** DONE cleanup files system [4/4]
- [X] combine soft.lisp and genome.lisp
- [X] use full names
- [X] remove the zmq-specific packaging and asd file
- [X] directory for evolutionary strategies?

** DONE switch soft-asm from lists to vectors
This will free up lists for CL source code.

** DONE Flesh out the test suite [4/4]
- [X] mutation operators
- [X] copy returns a *new* and *equal* object
- [X] fitness evaluation
- [X] population addition and subtraction

** DONE implement general tree-base operations
** DONE implement general list-based operations
** DONE fix bugs in list-based genome
- setf doesn't seem to have any effect because it is called on the
  constant data held in the variable rather than the variable itself

** DONE add a lisp source-code level representation
Should be able to repair the gcd algorithm.
file:test/gcd/repair-lisp.lisp

** DONE fix more bugs in lisp repair
it looks like evaluation and mutation and crossover are all throwing
errors, many of which are caused by that which should be a list not
being a list.

many `handler-case' statements are sprinkled through the code, update
these to write out offending genomes and functions to files for use in
future test cases

** DONE ensure that all proper lists stay proper lists in list genome mutation
** TODO add elf level representation
** TODO test external script repair at all three levels
** TODO add an =optimize= evolutionary method
   :PROPERTIES:
   :CUSTOM_ID: multi-objective-optimization
   :END:
- multi-objective optimization for things like speed and size
- should live in file:evolution/optimize.lisp

** TODO use optimization to evolve better FFT
Use [[#multi-objective-optimization][the =optimize= method]] to evolve a better FFT function along
dimensions such as
- power consumption
- running time
- communication overhead

** TODO look at interactive evolution of individual CL functions
The idea being to support an interactive development environment in
which the developer starts by associating some conditions with a
function, probably best to use a macro
#+begin_src lisp
  (defmacro defadapt (name args conditions &body body)
    (let ((func-name (gensym "function"))
          (condition (gensym "condition")))
      `(let ((,func-name (defun ,name ,args ,@body)))
         (dolist (,condition ,conditions)
           (setf (get ,func-name (first ,condition)) (second ,condition)))
         ,func-name)))

  (defadapt square-root (x)
      '((test (for-all ((n #'an-integer)
                        (r #'a-real))
                (is numberp (square-root n))
                (is numberp (square-root r))
                (only-if (> n 0) (is > (expt (square-root n) 2) 0))
                (only-if (> r 0) (is > (expt (square-root r) 2) 0))
                (only-if (>= n 0) (is < (- n (expt (square-root n) 2)) 0.001))
                (only-if (>= r 0) (is < (- r (expt (square-root r) 2)) 0.001)))))
    (sqrt x) #| ...rest of body... |#)

  (get 'square-root 'test)

  #+QuickCheck
  (quickcheck
    (for-all ((n #'an-integer)
              (r #'a-real))
      (is numberp (square-root n))
      (is numberp (square-root r))
      (only-if (> n 0) (is > (expt (square-root n) 2) 0))
      (only-if (> r 0) (is > (expt (square-root r) 2) 0))
      (only-if (>= n 0) (is < (- n (expt (square-root n) 2)) 0.001))
      (only-if (>= r 0) (is < (- r (expt (square-root r) 2)) 0.001))))
#+end_src

** TODO manipulate compiled lisp code
   :PROPERTIES:
   :CUSTOM_ID: lisp-asm
   :END:
Using the =disassemble= it is possible to access the compiled ASM of
lisp functions.

** TODO share assembly code between =soft-lisp= and =soft-asm=
After [[#lisp-asm][manipulate compiled lisp code]] is complete, it should then be
possible to share code between =soft-lisp= *and* =soft-asm= software
objects.  Just another =defmethod= on the =crossover= generic
function.
** CANCELED integrate with LLVM
   - State "CANCELED"   from "TODO"       [2012-02-23 Thu 18:46] \\
     better (for now) to integrate with CLANG
see
- http://llvm.org/
- http://www.cliki.net/LLVM
- https://github.com/sellout/CL-LLVM -- install with quicklisp and
  work through the lisp version of the LLVM tutorial

Then look at [[http://llvm.org/docs/WritingAnLLVMPass.html][How to write a Pass]] for implementing this entire
technique as a compiler pass -- should have AST/IR manipulation in
there as well.

For parsing and manipulating LLVM IR, see [[http://stackoverflow.com/questions/9160509/how-do-i-parse-llvm-ir][how-do-i-parse-llvm-ir]].

** CANCELED parse C source code
   - State "CANCELED"   from "TODO"       [2012-06-20 Wed 14:24] \\
     nope, use an extant library
There is a lisp/YACC parser named =parcl= which uses yacc see
http://common-lisp.net/~sionescu/misc/parcl.tar.gz.

It works but isn't robust to stuff like comments or #include
directives.

Probably the most robust solution is to [[id:5291eb9c-6abd-4265-a7b5-f182cf317d6c][integrate with CLANG]].

** TODO integrate with CLANG
   :PROPERTIES:
   :ID:       5291eb9c-6abd-4265-a7b5-f182cf317d6c
   :END:
- [[http://stackoverflow.com/questions/5130695/how-to-make-use-of-clangs-ast][This StackOverflow]] page has good links
- Go [[http://llvm.org/devmtg/2010-11/][here]] and read _libclang: Thinking Beyond the Compiler_.
- see the [[http://clang.llvm.org/doxygen/group__CINDEX.html][clang C API]], especially [[http://clang.llvm.org/doxygen/group__CINDEX__HIGH.html][higher level API functions]]
- See "[[http://llvm.org/docs/ProgrammersManual.html#simplechanges][Making simple changes]]" in the Programmers Manual
- see file:/usr/local/src/llvm/tools/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp
- see file:/usr/local/src/llvm/tools/clang/tools/c-index-test/c-index-test.c

Another option is [[http://gcc-melt.org/][gcc-melt]] with [[https://github.com/bstarynk/melt-examples][examples]].

*** useful functions, how this will work
- [[file:/usr/local/src/llvm/tools/clang/include/clang-c/Index.h::*%20\brief%20Retrieve%20the%20replacement%20information%20for%20a%20given%20fix-it.][file:/usr/local/src/llvm/tools/clang/include/clang-c/Index.h::* \brief Retrieve the replacement information for a given fix-it.]]

* COMMENT Publishing
This code is used to publish this page to the =cs.unm.edu= webserver.
#+begin_src emacs-lisp :results silent
  (setq software-evolution-dir (file-name-directory (or load-file-name buffer-file-name)))
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
  ;; the main html page
  (add-to-list 'org-publish-project-alist
               `("software-evolution-html"
                  :base-directory ,software-evolution-dir
                  :include ("README")
                  :publishing-directory "/ssh:eschulte@moons.cs.unm.edu:~/public_html/code/software-evolution/"
                  :publishing-function org-publish-org-to-html
                  :style "<style type=\"text/css\">\n <!--/*--><![CDATA[/*><!--*/
    .title  { text-align: center; }
    .todo   { color: red; }
    .done   { color: green; }
    .tag    { background-color: #add8e6; font-weight:normal }
    .timestamp { color: #bebebe; }
    .timestamp-kwd { color: #5f9ea0; }
    p.verse { margin-left: 3% }
    p { text-align: justify }
    pre {
      background: #232323;
      color: #e6e1dc;
      border: 1pt solid #AEBDCC;
      padding: 5pt;
      overflow: auto;
      display: table-cell;
    }
    table { border-collapse: collapse; }
    td, th { vertical-align: top; }
    dt { font-weight: bold; }
    div.figure { padding: 0.5em; }
    div.figure p { text-align: center; }
    .linenr { font-size:smaller }
    #content { max-width: 1000px; margin: auto; }
    /*]]>*/-->
  </style>"))
  ;; the contents of the base directory
  (add-to-list 'org-publish-project-alist
               `("software-evolution-data"
                 :base-directory ,software-evolution-dir
                 :include ("COPYING" "Makefile" "README")
                 :base-extension "lisp"
                 :publishing-directory "/ssh:eschulte@moons.cs.unm.edu:~/public_html/code/software-evolution/"
                 :publishing-function org-publish-attachment))
  ;; the contents of the lisp subdirectories
  (dolist (subdir '("software" "evolution"))
    (add-to-list 'org-publish-project-alist
                 `(,(concat "software-evolution-" subdir)
                   :base-directory ,(expand-file-name subdir software-evolution-dir)
                   :base-extension "lisp"
                   :publishing-directory ,(concat "/ssh:eschulte@moons.cs.unm.edu:~/public_html/code/software-evolution/"
                                                  subdir)
                   :publishing-function org-publish-attachment)))
  ;; a single combined project to publish both html and supporting materials
  (add-to-list 'org-publish-project-alist
               '("software-evolution" :components
                 ("software-evolution-html"
                  "software-evolution-data"
                  "software-evolution-software"
                  "software-evolution-evolution")))

#+end_src
