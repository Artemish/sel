# -*- org -*-
#+Title: (soft-ev) Software Evolution
#+Author: Eric Schulte
#+email: eschulte@cs.unm.edu
#+Options: toc:1
#+properties: exports code

#+begin_center
enabling the evolution of extant software projects
#+end_center

* Design
:                                                             population functions
:  global variables                                           --------------------
:  ----------------            +--------------+               incorporate
:  *population*                | *population* |               evict
:  *max-population-size*       |--------------|               tournament
:  *tournament-size*           | list of soft |               mutate
:  *test-script*               |    objects   |               crossed
:  *pos-test-num*              +--------------+               new-individual
:  *neg-test-num*                      |                      evolve
:  *pos-test-mult*                   +-+-+
:  *neg-test-mult*                   | | |                    soft functions
:  *keep-source*             +------------------+             --------------
:  *cross-chance*            |       soft       |             copy
:  *fitness-evals*           |------------------|             fitness
:  *running*                 | exe              |             exe
:                            | genome (path)    |             delete-exe
:  evolve arguments          | fitness          |             from (from-bytes)
:  ----------------          | history          |             to (to-bytes)
:  max-evals                 +------------------+             good-ind
:  max-time                    |              |               bad-ind
:  max-inds                    |              |               good-place
:  max-fit             +------------+      +-----------+      bad-place
:  min-fit             |  soft-asm  |      | soft-ast  |      insert
:  pop-fn              |------------|      |-----------|      cut
:  ind-fn              | addr-map   |      | (pending) |      swap
:                      +------------+      +-----------+ ...  crossover

The =*population*= is a global variable holding a list of evolving
software variants.  The evolutionary computation functions operate
directly on the =*population*= through the "population functions".
Exposure of the population through a global variable enables to user
to initialize the population in any way, and allows external functions
to monitor and interact with the population during evolution.  For
example =soft-ev-zmq= enables sharing of individuals between multiple
instances of evolution through two "sharing" functions which
manipulate the population during evolution.

Each software variant is an object whose class is a sub-class of the
general =soft= class.  New representations are implemented through
sub-classing =soft= and customizing the generic "soft functions" where
necessary.

Parameterization of the EC algorithm is done through setting global
variables and through arguments to the =evolve= function.

* Usage
Licensed under the GPLV3, see the [[file:COPYING][COPYING]] file in this directory for
more information.

1. Available using git from =git://adaptive.cs.unm.edu/soft-ev.git=.

2. To begin, =cd= into the =soft-ev/gcd= directory and look around.
   : $ ls -1
   : gcd.c                   # <- original program
   : gcd.s                   # <- compiled from gcd.c with gcc -S gcd.c
   : repair.lisp             # <- options to repair
   : sample.neg              # <- oprofile trace of negative test execution
   : sample.pos              # <- oprofile trace of positive test execution
   : test.sh*                # <- test script used to exercise gcd variants

3. Repairs may be performed from an interactive lisp session, for
   example, through evaluating the forms in [[file:gcd/repair.lisp][repair.lisp]].

4. Running =make= in this directory will build a =soft-ev= command
   line utility allowing repair to be scripted from the command line
   using simple configuration files.  The help message of the
   =soft-ev= command line utility serves as a template configuration
   file.

5. Distributed evolution between multiple lisp process on one or many
   machines is enabled using the [[http://www.zeromq.org][âˆ…MQ]] socket library.  Additionally,
   because population initialization is left to the user, distributed
   EC algorithms may also be implemented externally.  See
   [[file:gcd/second-run.lisp][second-run.lisp]] for an example configuration file using an incoming
   population.

* Notes
The following are informal working and development notes.

** thread local global variables
In case we want to run multiple populations in separate threads.

This should be easy with =let= binding of global variables.

** remember the need to collect statistics
- number of test suite evaluations
- time spent in many different aspects of the program, e.g.,
  - compilation
  - test suite evaluation
  - mutation and population maintenance
  - total run time

** consider how weighted path information propagates with mutation operators
Each individual should have its own weight, possibly expressed as a
diff against some global weight.

Even better, we can just store each individuals weight as part of its
genome.  If memory does become an issue then diff fanciness can be
brought to bear later on.

** possibly re-calculate the weighted path with each test case run
Nope, this would involve instrumenting each individual at the AST
level, and would require multiple runs for sampling at the ASM/ELF
levels, better to just use a heuristic to update/maintain weights.

e.g., weight of a recently transplanted piece of code is equal to the
average of previous weight and weight of both new neighbors.

See the =*genome-averaging-keys*= variable.

** allow adding individuals on-the-fly
Implement all operations as one-offs against a local =*population*=, a
la [[http://cs.unm.edu/~treport/tr/11-04/paper-2011-01.pdf][PEC]].

** as basis for distributed GP repair
See above, shouldn't be too difficult.  Loosely follow the PEC
algorithm.

** timed EC operators at set frequencies
One frequency options should be "fast as possible", but allowing
frequencies could be good for known energy consumption (e.g., if
running on someone's phone).

* Tasks [1/10]
** TODO switch soft-asm from lists to vectors
This will free up lists for CL source code.

** DONE Flesh out the test suite [4/4]
- [X] mutation operators
- [X] copy returns a *new* and *equal* object
- [X] fitness evaluation
- [X] population addition and subtraction

** TODO add elf level representation
** TODO implement general tree-base mutation operations
** TODO add a lisp source-code level representation
** TODO add an =optimize= method
   :PROPERTIES:
   :CUSTOM_ID: multi-objective-optimization
   :END:
multi-objective optimization for things like speed and size

** TODO use optimization to evolve better FFT
Use [[#multi-objective-optimization][the =optimize= method]] to evolve a better FFT function along
dimensions such as
- power consumption
- running time
- communication overhead

** TODO look at interactive evolution of individual CL functions
The idea being to support an interactive development environment in
which the developer starts by associating some conditions with a
function, e.g.,
#+begin_src lisp
  (defun square (x)
    (declare (output
              (> output 0)
              (> output x)
              (= (sqrt output) x)))
    )
#+end_src
** TODO manipulate compiled lisp code
   :PROPERTIES:
   :CUSTOM_ID: lisp-asm
   :END:
Using the =disassemble= it is possible to access the compiled ASM of
lisp functions.

** TODO share assembly code between =soft-lisp= and =soft-asm=
After [[#lisp-asm][manipulate compiled lisp code]] is complete, it should then be
possible to share code between =soft-lisp= *and* =soft-asm= software
objects.  Just another =defmethod= on the =crossover= generic
function.
* COMMENT Publishing
This code is used to publish this page to the =cs.unm.edu= webserver.
#+begin_src emacs-lisp :results silent
  (setq soft-ev-dir (file-name-directory (or load-file-name buffer-file-name)))
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
  ;; the main html page
  (add-to-list 'org-publish-project-alist
               `("soft-ev-html"
                  :base-directory ,soft-ev-dir
                  :include ("README")
                  :publishing-directory "/ssh:eschulte@moons.cs.unm.edu:~/public_html/code/soft-ev/"
                  :publishing-function org-publish-org-to-html))
  ;; the contents of the base directory
  (add-to-list 'org-publish-project-alist
               `("soft-ev-data"
                 :base-directory ,soft-ev-dir
                 :include ("COPYING" "Makefile" "README")
                 :base-extension "lisp"
                 :publishing-directory "/ssh:eschulte@moons.cs.unm.edu:~/public_html/code/soft-ev/"
                 :publishing-function org-publish-attachment))
  ;; the contents of the gcd directory
  (add-to-list 'org-publish-project-alist
               `("soft-ev-gcd"
                 :base-directory ,(expand-file-name "gcd" soft-ev-dir)
                 :include ("gcd.c" "test.sh")
                 :base-extension "lisp"
                 :publishing-directory "/ssh:eschulte@moons.cs.unm.edu:~/public_html/code/soft-ev/gcd/"
                 :publishing-function org-publish-attachment))
  ;; a single combined project to publish both html and supporting materials
  (add-to-list 'org-publish-project-alist
               '("soft-ev" :components
                 ("soft-ev-html" "soft-ev-data" "soft-ev-gcd")))
#+end_src
